<?xml version="1.0"?>
<ast file=".\data_structures.cpp" language="cpp">
  <translation_unit line_range="1-100">
    <comment>// data_structures.cpp
    </comment>
    <comment>// 数据结构实现示例
    </comment>
    <preproc_include line_range="4-5">
      <n__include>#include</n__include>
      <system_lib_string>&lt;iostream&gt;</system_lib_string>
    </preproc_include>
    <preproc_include line_range="5-6">
      <n__include>#include</n__include>
      <system_lib_string>&lt;memory&gt;</system_lib_string>
    </preproc_include>
    <struct_specifier line_range="7-7" declaration_text="struct Node_base">
      <struct>struct</struct>
      <type_identifier>Node_base</type_identifier>
      <field_declaration_list line_range="7-7">
        <n__>{</n__>
        <n__>}</n__>
      </field_declaration_list>
    </struct_specifier>
    <n__>;</n__>
    <comment>// 简单链表节点定义
    </comment>
    <template_declaration line_range="10-17" template_text="template&lt;typename T">
      <template>template</template>
      <template_parameter_list>
        <n__>&lt;</n__>
        <type_parameter_declaration line_range="10-10">
          <typename>typename</typename>
          <type_identifier>T</type_identifier>
        </type_parameter_declaration>
        <n__>&gt;</n__>
      </template_parameter_list>
      <struct_specifier line_range="11-17" declaration_text="struct Node : Node_base">
        <struct>struct</struct>
        <type_identifier>Node</type_identifier>
        <base_class_clause>
          <n__>:</n__>
          <type_identifier>Node_base</type_identifier>
        </base_class_clause>
        <field_declaration_list line_range="12-17">
          <n__>{</n__>
          <field_declaration line_range="13-13" text="T data;">
            <type_identifier>T</type_identifier>
            <field_identifier>data</field_identifier>
            <n__>;</n__>
          </field_declaration>
          <field_declaration line_range="14-14" text="std::shared_ptr&lt;Node&lt;T&gt;&gt; next;">
            <qualified_identifier>
              <namespace_identifier>std</namespace_identifier>
              <n___>::</n___>
              <template_type>
                <type_identifier>shared_ptr</type_identifier>
                <template_argument_list>
                  <n__>&lt;</n__>
                  <type_descriptor>
                    <template_type>
                      <type_identifier>Node</type_identifier>
                      <template_argument_list>
                        <n__>&lt;</n__>
                        <type_descriptor>
                          <type_identifier>T</type_identifier>
                        </type_descriptor>
                        <n__>&gt;</n__>
                      </template_argument_list>
                    </template_type>
                  </type_descriptor>
                  <n__>&gt;</n__>
                </template_argument_list>
              </template_type>
            </qualified_identifier>
            <field_identifier>next</field_identifier>
            <n__>;</n__>
          </field_declaration>
          <function_definition line_range="16-16">
            <function_declarator line_range="16-16" text="Node(T value)">
              <identifier>Node</identifier>
              <parameter_list>
                <n__>(</n__>
                <parameter_declaration line_range="16-16">
                  <type_identifier>T</type_identifier>
                  <identifier>value</identifier>
                </parameter_declaration>
                <n__>)</n__>
              </parameter_list>
            </function_declarator>
            <field_initializer_list>
              <n__>:</n__>
              <field_initializer>
                <field_identifier>data</field_identifier>
                <argument_list>
                  <n__>(</n__>
                  <identifier>value</identifier>
                  <n__>)</n__>
                </argument_list>
              </field_initializer>
              <n__>,</n__>
              <field_initializer>
                <field_identifier>next</field_identifier>
                <argument_list>
                  <n__>(</n__>
                  <null>
                    <nullptr>nullptr</nullptr>
                  </null>
                  <n__>)</n__>
                </argument_list>
              </field_initializer>
            </field_initializer_list>
            <compound_statement>
              <n__>{</n__>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <n__>}</n__>
        </field_declaration_list>
      </struct_specifier>
      <n__>;</n__>
    </template_declaration>
    <comment>// 链表类实现
    </comment>
    <template_declaration line_range="20-75" template_text="template&lt;typename T">
      <template>template</template>
      <template_parameter_list>
        <n__>&lt;</n__>
        <type_parameter_declaration line_range="20-20">
          <typename>typename</typename>
          <type_identifier>T</type_identifier>
        </type_parameter_declaration>
        <n__>&gt;</n__>
      </template_parameter_list>
      <class_specifier line_range="21-75" declaration_text="class LinkedList">
        <class>class</class>
        <type_identifier>LinkedList</type_identifier>
        <field_declaration_list line_range="21-75">
          <n__>{</n__>
          <access_specifier declaration_text="private">
            <private>private</private>
          </access_specifier>
          <n__>:</n__>
          <field_declaration line_range="23-23" text="std::shared_ptr&lt;Node&lt;T&gt;&gt; head;">
            <qualified_identifier>
              <namespace_identifier>std</namespace_identifier>
              <n___>::</n___>
              <template_type>
                <type_identifier>shared_ptr</type_identifier>
                <template_argument_list>
                  <n__>&lt;</n__>
                  <type_descriptor>
                    <template_type>
                      <type_identifier>Node</type_identifier>
                      <template_argument_list>
                        <n__>&lt;</n__>
                        <type_descriptor>
                          <type_identifier>T</type_identifier>
                        </type_descriptor>
                        <n__>&gt;</n__>
                      </template_argument_list>
                    </template_type>
                  </type_descriptor>
                  <n__>&gt;</n__>
                </template_argument_list>
              </template_type>
            </qualified_identifier>
            <field_identifier>head</field_identifier>
            <n__>;</n__>
          </field_declaration>
          <field_declaration line_range="24-24" text="size_t size;">
            <primitive_type>size_t</primitive_type>
            <field_identifier>size</field_identifier>
            <n__>;</n__>
          </field_declaration>
          <access_specifier declaration_text="public">
            <public>public</public>
          </access_specifier>
          <n__>:</n__>
          <function_definition line_range="27-27">
            <function_declarator line_range="27-27" text="LinkedList()">
              <identifier>LinkedList</identifier>
              <parameter_list>
                <n__>(</n__>
                <n__>)</n__>
              </parameter_list>
            </function_declarator>
            <field_initializer_list>
              <n__>:</n__>
              <field_initializer>
                <field_identifier>head</field_identifier>
                <argument_list>
                  <n__>(</n__>
                  <null>
                    <nullptr>nullptr</nullptr>
                  </null>
                  <n__>)</n__>
                </argument_list>
              </field_initializer>
              <n__>,</n__>
              <field_initializer>
                <field_identifier>size</field_identifier>
                <argument_list>
                  <n__>(</n__>
                  <number_literal>0</number_literal>
                  <n__>)</n__>
                </argument_list>
              </field_initializer>
            </field_initializer_list>
            <compound_statement>
              <n__>{</n__>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <comment>// 添加元素到链表头部
          </comment>
          <function_definition line_range="30-35">
            <primitive_type>void</primitive_type>
            <function_declarator line_range="30-30" text="void push_front(T value)">
              <field_identifier>push_front</field_identifier>
              <parameter_list>
                <n__>(</n__>
                <parameter_declaration line_range="30-30">
                  <type_identifier>T</type_identifier>
                  <identifier>value</identifier>
                </parameter_declaration>
                <n__>)</n__>
              </parameter_list>
            </function_declarator>
            <compound_statement>
              <n__>{</n__>
              <declaration line_range="31-31">
                <placeholder_type_specifier declaration_text="auto">
                  <auto>auto</auto>
                </placeholder_type_specifier>
                <init_declarator line_range="31-31"
                  text="auto new_node = std::make_shared&lt;Node&lt;T&gt;&gt;(value)">
                  <identifier>new_node</identifier>
                  <n__>=</n__>
                  <call_expression>
                    <qualified_identifier>
                      <namespace_identifier>std</namespace_identifier>
                      <n___>::</n___>
                      <template_function>
                        <identifier>make_shared</identifier>
                        <template_argument_list>
                          <n__>&lt;</n__>
                          <type_descriptor>
                            <template_type>
                              <type_identifier>Node</type_identifier>
                              <template_argument_list>
                                <n__>&lt;</n__>
                                <type_descriptor>
                                  <type_identifier>T</type_identifier>
                                </type_descriptor>
                                <n__>&gt;</n__>
                              </template_argument_list>
                            </template_type>
                          </type_descriptor>
                          <n__>&gt;</n__>
                        </template_argument_list>
                      </template_function>
                    </qualified_identifier>
                    <argument_list>
                      <n__>(</n__>
                      <identifier>value</identifier>
                      <n__>)</n__>
                    </argument_list>
                  </call_expression>
                </init_declarator>
                <n__>;</n__>
              </declaration>
              <expression_statement>
                <assignment_expression>
                  <field_expression>
                    <identifier>new_node</identifier>
                    <n_-_>-&gt;</n_-_>
                    <field_identifier>next</field_identifier>
                  </field_expression>
                  <n__>=</n__>
                  <identifier>head</identifier>
                </assignment_expression>
                <n__>;</n__>
              </expression_statement>
              <expression_statement>
                <assignment_expression>
                  <identifier>head</identifier>
                  <n__>=</n__>
                  <identifier>new_node</identifier>
                </assignment_expression>
                <n__>;</n__>
              </expression_statement>
              <expression_statement>
                <update_expression>
                  <identifier>size</identifier>
                  <n___>++</n___>
                </update_expression>
                <n__>;</n__>
              </expression_statement>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <comment>// 添加元素到链表尾部
          </comment>
          <function_definition line_range="38-51">
            <primitive_type>void</primitive_type>
            <function_declarator line_range="38-38" text="void push_back(T value)">
              <field_identifier>push_back</field_identifier>
              <parameter_list>
                <n__>(</n__>
                <parameter_declaration line_range="38-38">
                  <type_identifier>T</type_identifier>
                  <identifier>value</identifier>
                </parameter_declaration>
                <n__>)</n__>
              </parameter_list>
            </function_declarator>
            <compound_statement>
              <n__>{</n__>
              <declaration line_range="39-39">
                <placeholder_type_specifier declaration_text="auto">
                  <auto>auto</auto>
                </placeholder_type_specifier>
                <init_declarator line_range="39-39"
                  text="auto new_node = std::make_shared&lt;Node&lt;T&gt;&gt;(value)">
                  <identifier>new_node</identifier>
                  <n__>=</n__>
                  <call_expression>
                    <qualified_identifier>
                      <namespace_identifier>std</namespace_identifier>
                      <n___>::</n___>
                      <template_function>
                        <identifier>make_shared</identifier>
                        <template_argument_list>
                          <n__>&lt;</n__>
                          <type_descriptor>
                            <template_type>
                              <type_identifier>Node</type_identifier>
                              <template_argument_list>
                                <n__>&lt;</n__>
                                <type_descriptor>
                                  <type_identifier>T</type_identifier>
                                </type_descriptor>
                                <n__>&gt;</n__>
                              </template_argument_list>
                            </template_type>
                          </type_descriptor>
                          <n__>&gt;</n__>
                        </template_argument_list>
                      </template_function>
                    </qualified_identifier>
                    <argument_list>
                      <n__>(</n__>
                      <identifier>value</identifier>
                      <n__>)</n__>
                    </argument_list>
                  </call_expression>
                </init_declarator>
                <n__>;</n__>
              </declaration>
              <if_statement>
                <if>if</if>
                <condition_clause>
                  <n__>(</n__>
                  <unary_expression>
                    <n__>!</n__>
                    <identifier>head</identifier>
                  </unary_expression>
                  <n__>)</n__>
                </condition_clause>
                <compound_statement>
                  <n__>{</n__>
                  <expression_statement>
                    <assignment_expression>
                      <identifier>head</identifier>
                      <n__>=</n__>
                      <identifier>new_node</identifier>
                    </assignment_expression>
                    <n__>;</n__>
                  </expression_statement>
                  <n__>}</n__>
                </compound_statement>
                <else_clause>
                  <else>else</else>
                  <compound_statement>
                    <n__>{</n__>
                    <declaration line_range="44-44">
                      <placeholder_type_specifier declaration_text="auto">
                        <auto>auto</auto>
                      </placeholder_type_specifier>
                      <init_declarator line_range="44-44" text="auto current = head">
                        <identifier>current</identifier>
                        <n__>=</n__>
                        <identifier>head</identifier>
                      </init_declarator>
                      <n__>;</n__>
                    </declaration>
                    <while_statement>
                      <while>while</while>
                      <condition_clause>
                        <n__>(</n__>
                        <field_expression>
                          <identifier>current</identifier>
                          <n_-_>-&gt;</n_-_>
                          <field_identifier>next</field_identifier>
                        </field_expression>
                        <n__>)</n__>
                      </condition_clause>
                      <compound_statement>
                        <n__>{</n__>
                        <expression_statement>
                          <assignment_expression>
                            <identifier>current</identifier>
                            <n__>=</n__>
                            <field_expression>
                              <identifier>current</identifier>
                              <n_-_>-&gt;</n_-_>
                              <field_identifier>next</field_identifier>
                            </field_expression>
                          </assignment_expression>
                          <n__>;</n__>
                        </expression_statement>
                        <n__>}</n__>
                      </compound_statement>
                    </while_statement>
                    <expression_statement>
                      <assignment_expression>
                        <field_expression>
                          <identifier>current</identifier>
                          <n_-_>-&gt;</n_-_>
                          <field_identifier>next</field_identifier>
                        </field_expression>
                        <n__>=</n__>
                        <identifier>new_node</identifier>
                      </assignment_expression>
                      <n__>;</n__>
                    </expression_statement>
                    <n__>}</n__>
                  </compound_statement>
                </else_clause>
              </if_statement>
              <expression_statement>
                <update_expression>
                  <identifier>size</identifier>
                  <n___>++</n___>
                </update_expression>
                <n__>;</n__>
              </expression_statement>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <comment>// 移除链表头部元素
          </comment>
          <function_definition line_range="54-59">
            <primitive_type>void</primitive_type>
            <function_declarator line_range="54-54" text="void pop_front()">
              <field_identifier>pop_front</field_identifier>
              <parameter_list>
                <n__>(</n__>
                <n__>)</n__>
              </parameter_list>
            </function_declarator>
            <compound_statement>
              <n__>{</n__>
              <if_statement>
                <if>if</if>
                <condition_clause>
                  <n__>(</n__>
                  <identifier>head</identifier>
                  <n__>)</n__>
                </condition_clause>
                <compound_statement>
                  <n__>{</n__>
                  <expression_statement>
                    <assignment_expression>
                      <identifier>head</identifier>
                      <n__>=</n__>
                      <field_expression>
                        <identifier>head</identifier>
                        <n_-_>-&gt;</n_-_>
                        <field_identifier>next</field_identifier>
                      </field_expression>
                    </assignment_expression>
                    <n__>;</n__>
                  </expression_statement>
                  <expression_statement>
                    <update_expression>
                      <identifier>size</identifier>
                      <n_-->--</n_-->
                    </update_expression>
                    <n__>;</n__>
                  </expression_statement>
                  <n__>}</n__>
                </compound_statement>
              </if_statement>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <comment>// 获取链表大小
          </comment>
          <function_definition line_range="62-64">
            <primitive_type>size_t</primitive_type>
            <function_declarator line_range="62-62" text="size_t get_size() const">
              <field_identifier>get_size</field_identifier>
              <parameter_list>
                <n__>(</n__>
                <n__>)</n__>
              </parameter_list>
              <type_qualifier>
                <const>const</const>
              </type_qualifier>
            </function_declarator>
            <compound_statement>
              <n__>{</n__>
              <return_statement>
                <return>return</return>
                <identifier>size</identifier>
                <n__>;</n__>
              </return_statement>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <comment>// 打印链表内容
          </comment>
          <function_definition line_range="67-74">
            <primitive_type>void</primitive_type>
            <function_declarator line_range="67-67" text="void print() const">
              <field_identifier>print</field_identifier>
              <parameter_list>
                <n__>(</n__>
                <n__>)</n__>
              </parameter_list>
              <type_qualifier>
                <const>const</const>
              </type_qualifier>
            </function_declarator>
            <compound_statement>
              <n__>{</n__>
              <declaration line_range="68-68">
                <placeholder_type_specifier declaration_text="auto">
                  <auto>auto</auto>
                </placeholder_type_specifier>
                <init_declarator line_range="68-68" text="auto current = head">
                  <identifier>current</identifier>
                  <n__>=</n__>
                  <identifier>head</identifier>
                </init_declarator>
                <n__>;</n__>
              </declaration>
              <while_statement>
                <while>while</while>
                <condition_clause>
                  <n__>(</n__>
                  <identifier>current</identifier>
                  <n__>)</n__>
                </condition_clause>
                <compound_statement>
                  <n__>{</n__>
                  <expression_statement>
                    <binary_expression>
                      <binary_expression>
                        <qualified_identifier>
                          <namespace_identifier>std</namespace_identifier>
                          <n___>::</n___>
                          <identifier>cout</identifier>
                        </qualified_identifier>
                        <n___>&lt;&lt;</n___>
                        <field_expression>
                          <identifier>current</identifier>
                          <n_-_>-&gt;</n_-_>
                          <field_identifier>data</field_identifier>
                        </field_expression>
                      </binary_expression>
                      <n___>&lt;&lt;</n___>
                      <string_literal>
                        <n__>"</n__>
                        <string_content> -&gt; </string_content>
                        <n__>"</n__>
                      </string_literal>
                    </binary_expression>
                    <n__>;</n__>
                  </expression_statement>
                  <expression_statement>
                    <assignment_expression>
                      <identifier>current</identifier>
                      <n__>=</n__>
                      <field_expression>
                        <identifier>current</identifier>
                        <n_-_>-&gt;</n_-_>
                        <field_identifier>next</field_identifier>
                      </field_expression>
                    </assignment_expression>
                    <n__>;</n__>
                  </expression_statement>
                  <n__>}</n__>
                </compound_statement>
              </while_statement>
              <expression_statement>
                <binary_expression>
                  <binary_expression>
                    <qualified_identifier>
                      <namespace_identifier>std</namespace_identifier>
                      <n___>::</n___>
                      <identifier>cout</identifier>
                    </qualified_identifier>
                    <n___>&lt;&lt;</n___>
                    <string_literal>
                      <n__>"</n__>
                      <string_content>nullptr</string_content>
                      <n__>"</n__>
                    </string_literal>
                  </binary_expression>
                  <n___>&lt;&lt;</n___>
                  <qualified_identifier>
                    <namespace_identifier>std</namespace_identifier>
                    <n___>::</n___>
                    <identifier>endl</identifier>
                  </qualified_identifier>
                </binary_expression>
                <n__>;</n__>
              </expression_statement>
              <n__>}</n__>
            </compound_statement>
          </function_definition>
          <n__>}</n__>
        </field_declaration_list>
      </class_specifier>
      <n__>;</n__>
    </template_declaration>
    <comment>// 测试链表
    </comment>
    <function_definition line_range="78-99">
      <primitive_type>int</primitive_type>
      <function_declarator line_range="78-78" text="int main()">
        <identifier>main</identifier>
        <parameter_list>
          <n__>(</n__>
          <n__>)</n__>
        </parameter_list>
      </function_declarator>
      <compound_statement>
        <n__>{</n__>
        <declaration line_range="79-79">
          <template_type>
            <type_identifier>LinkedList</type_identifier>
            <template_argument_list>
              <n__>&lt;</n__>
              <type_descriptor>
                <primitive_type>int</primitive_type>
              </type_descriptor>
              <n__>&gt;</n__>
            </template_argument_list>
          </template_type>
          <identifier>list</identifier>
          <n__>;</n__>
        </declaration>
        <comment>// 添加元素
        </comment>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>push_back</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <number_literal>1</number_literal>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>push_back</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <number_literal>2</number_literal>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>push_back</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <number_literal>3</number_literal>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>push_front</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <number_literal>0</number_literal>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <comment>// 打印链表
        </comment>
        <expression_statement>
          <binary_expression>
            <binary_expression>
              <binary_expression>
                <qualified_identifier>
                  <namespace_identifier>std</namespace_identifier>
                  <n___>::</n___>
                  <identifier>cout</identifier>
                </qualified_identifier>
                <n___>&lt;&lt;</n___>
                <string_literal>
                  <n__>"</n__>
                  <string_content>List size: </string_content>
                  <n__>"</n__>
                </string_literal>
              </binary_expression>
              <n___>&lt;&lt;</n___>
              <call_expression>
                <field_expression>
                  <identifier>list</identifier>
                  <n_.>.</n_.>
                  <field_identifier>get_size</field_identifier>
                </field_expression>
                <argument_list>
                  <n__>(</n__>
                  <n__>)</n__>
                </argument_list>
              </call_expression>
            </binary_expression>
            <n___>&lt;&lt;</n___>
            <qualified_identifier>
              <namespace_identifier>std</namespace_identifier>
              <n___>::</n___>
              <identifier>endl</identifier>
            </qualified_identifier>
          </binary_expression>
          <n__>;</n__>
        </expression_statement>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>print</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <comment>// 移除头部元素
        </comment>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>pop_front</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <comment>// 再次打印
        </comment>
        <expression_statement>
          <binary_expression>
            <binary_expression>
              <binary_expression>
                <qualified_identifier>
                  <namespace_identifier>std</namespace_identifier>
                  <n___>::</n___>
                  <identifier>cout</identifier>
                </qualified_identifier>
                <n___>&lt;&lt;</n___>
                <string_literal>
                  <n__>"</n__>
                  <string_content>After pop_front, list size: </string_content>
                  <n__>"</n__>
                </string_literal>
              </binary_expression>
              <n___>&lt;&lt;</n___>
              <call_expression>
                <field_expression>
                  <identifier>list</identifier>
                  <n_.>.</n_.>
                  <field_identifier>get_size</field_identifier>
                </field_expression>
                <argument_list>
                  <n__>(</n__>
                  <n__>)</n__>
                </argument_list>
              </call_expression>
            </binary_expression>
            <n___>&lt;&lt;</n___>
            <qualified_identifier>
              <namespace_identifier>std</namespace_identifier>
              <n___>::</n___>
              <identifier>endl</identifier>
            </qualified_identifier>
          </binary_expression>
          <n__>;</n__>
        </expression_statement>
        <expression_statement>
          <call_expression>
            <field_expression>
              <identifier>list</identifier>
              <n_.>.</n_.>
              <field_identifier>print</field_identifier>
            </field_expression>
            <argument_list>
              <n__>(</n__>
              <n__>)</n__>
            </argument_list>
          </call_expression>
          <n__>;</n__>
        </expression_statement>
        <return_statement>
          <return>return</return>
          <number_literal>0</number_literal>
          <n__>;</n__>
        </return_statement>
        <n__>}</n__>
      </compound_statement>
    </function_definition>
  </translation_unit>
</ast>